generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiRegistry {
  id         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  api_id     Int                 @default(autoincrement())
  name       String              @db.VarChar(255)
  endpoint   String              @db.VarChar(255)
  method     String              @db.VarChar(10)
  path       String              @db.VarChar(255)
  updated_at DateTime            @default(now()) @db.Timestamptz(6)
  created_at DateTime            @default(now()) @db.Timestamptz(6)
  apiScreens ApiScreenRegistry[] @relation("ApiRegistryToApiScreenRegistry")

  @@unique([name, endpoint, method, path])
}

model uom {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uom_name     String        @unique
  esign_status esign_status  @default(null)
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  history      uom_history[]

  @@map("uom")
}

model uom_history {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uom_name     String
  uom_uuid     String       @db.Uuid
  esign_status esign_status @default(null)
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  is_latest    Boolean      @default(true)
  uom          uom          @relation(fields: [uom_uuid], references: [id])

  @@map("uom_history")
}

model ScreenRegistry {
  id            String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen_id     Int                 @default(autoincrement())
  screen_name   String              @unique @db.VarChar(50)
  screen_url    String              @unique @db.VarChar(255)
  updated_at    DateTime            @default(now()) @db.Timestamptz(6)
  created_at    DateTime            @default(now()) @db.Timestamptz(6)
  screenScreens ApiScreenRegistry[] @relation("ScreenRegistryToApiScreenRegistry")

  @@unique([screen_name, screen_url])
}

model ApiScreenRegistry {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  api_id     String         @db.Uuid
  screen_id  String         @db.Uuid
  updated_at DateTime       @default(now()) @db.Timestamptz(6)
  created_at DateTime       @default(now()) @db.Timestamptz(6)
  api        ApiRegistry    @relation("ApiRegistryToApiScreenRegistry", fields: [api_id], references: [id])
  screen     ScreenRegistry @relation("ScreenRegistryToApiScreenRegistry", fields: [screen_id], references: [id])

  @@unique([api_id, screen_id])
}

model User {
  id                         String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                    String                    @unique @db.VarChar(50)
  user_name                  String                    @unique @db.VarChar(50)
  email                      String                    @default("") @db.VarChar(255)
  phone_number               String                    @default("") @db.VarChar(20)
  password                   String                    @db.VarChar(255)
  location_id                String?                   @db.Uuid
  department_id              String?                   @db.Uuid
  designation_id             String?                   @db.Uuid
  profile_photo              String?                   @db.VarChar(255)
  esign_status               esign_status              @default(null)
  is_active                  Boolean                   @default(true)
  role                       Role                      @default(user)
  jwt_token                  String?                   @db.VarChar(1024)
  last_activity_at           DateTime?                 @db.Timestamptz(6)
  password_expires_on        DateTime                  @default(dbgenerated("(now() + '90 days'::interval)")) @db.Timestamptz(6)
  old_passwords              String[]                  @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  failed_login_attempt_count Int                       @default(0)
  last_failed_login_at       DateTime?                 @db.Timestamptz(6)
  account_locked_until_at    DateTime?                 @db.Timestamptz(6)
  accessibility              Json?
  created_at                 DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime                  @default(now()) @db.Timestamptz(6)
  user_history               UserHistory[]
  department                 departments?              @relation(fields: [department_id], references: [id])
  designation                designations?             @relation(fields: [designation_id], references: [id])
  location                   locations?                @relation(fields: [location_id], references: [id])
  Aggregation_transaction    Aggregation_transaction[]

  @@map("users")
}

model UserHistory {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_uuid      String        @db.Uuid
  user_id        String        @db.VarChar(50)
  user_name      String        @db.VarChar(50)
  email          String        @default("") @db.VarChar(255)
  phone_number   String        @default("") @db.VarChar(20)
  department_id  String?       @db.Uuid
  designation_id String?       @db.Uuid
  location_id    String?       @db.Uuid
  profile_photo  String?       @db.VarChar(255)
  is_active      Boolean
  role           Role          @default(user)
  esign_status   esign_status  @default(null)
  accessibility  Json?
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
  is_latest      Boolean       @default(true)
  department     departments?  @relation(fields: [department_id], references: [id])
  designation    designations? @relation(fields: [designation_id], references: [id])
  location       locations?    @relation(fields: [location_id], references: [id])
  users          User          @relation(fields: [user_uuid], references: [id], map: "user_history_users_fk")

  @@map("user_history")
}

model Company {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id      String            @unique @db.VarChar(20)
  gs1_prefix      String            @unique @db.VarChar(10)
  gs2_prefix      String?           @unique @db.VarChar(10)
  gs3_prefix      String?           @unique @db.VarChar(10)
  company_name    String            @unique @db.VarChar(50)
  mfg_licence_no  String            @unique @db.VarChar(125)
  email           String            @default("") @db.VarChar(125)
  contact         String            @default("") @db.VarChar(10)
  address         String            @default("") @db.VarChar(150)
  esign_status    esign_status      @default(null)
  sent_to_cloud   Boolean           @default(false)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  CompanyHistory  CompanyHistory[]
  product         product[]
  product_history product_history[]
}

model CompanyHistory {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_uuid   String       @db.Uuid
  company_id     String       @db.VarChar(20)
  company_name   String       @db.VarChar(50)
  mfg_licence_no String       @db.VarChar(125)
  gs1_prefix     String       @unique @db.VarChar(10)
  gs2_prefix     String?      @unique @db.VarChar(10)
  gs3_prefix     String?      @unique @db.VarChar(10)
  sent_to_cloud  Boolean      @default(false)
  email          String       @default("") @db.VarChar(125)
  contact        String       @default("") @db.VarChar(10)
  address        String       @default("") @db.VarChar(150)
  esign_status   esign_status @default(null)
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  is_latest      Boolean      @default(true)
  Company        Company      @relation(fields: [company_uuid], references: [id], onDelete: Cascade, map: "companyhistory_company_fk")
}

model audit_logs {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  performed_action String
  remarks          String
  user_name        String
  user_id          String?
  performed_at     DateTime @default(now()) @db.Timestamptz(6)
  created_at       DateTime @default(now()) @db.Timestamptz(6)

  @@map("audit_logs")
}

model departments {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  department_id        String                @unique @map("department_id")
  department_name      String                @unique @map("department_name")
  is_location_required Boolean               @map("is_location_required")
  esign_status         esign_status          @default(null) @map("esign_status")
  created_at           DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at           DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  history              department_history[]  @relation("DepartmentToHistory")
  designation_history  designation_history[]
  designations         designations[]        @relation("DepartmentDesignations")
  UserHistory          UserHistory[]
  User                 User[]

  @@map("departments")
}

model department_history {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  department_uuid      String       @map("department_uuid") @db.Uuid
  department_id        String       @map("department_id")
  department_name      String       @map("department_name")
  is_location_required Boolean      @map("is_location_required")
  esign_status         esign_status @default(null) @map("esign_status")
  created_at           DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  is_latest            Boolean      @default(true) @map("is_latest")
  department           departments  @relation("DepartmentToHistory", fields: [department_uuid], references: [id])

  @@map("department_history")
}

model designations {
  id               String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  designation_id   String                @unique @map("designation_id")
  designation_name String                @map("designation_name")
  department_id    String                @map("department_id") @db.Uuid
  esign_status     esign_status          @default(null) @map("esign_status")
  api_ids          Int[]
  screen_ids       Int[]
  created_at       DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at       DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  history          designation_history[]
  department       departments           @relation("DepartmentDesignations", fields: [department_id], references: [id])
  UserHistory      UserHistory[]
  User             User[]

  @@unique([designation_name, department_id])
  @@map("designations")
}

model designation_history {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  designation_uuid String       @map("designation_uuid") @db.Uuid
  designation_id   String       @map("designation_id")
  designation_name String       @map("designation_name")
  department_id    String       @map("department_id") @db.Uuid
  esign_status     esign_status @default(null) @map("esign_status")
  created_at       DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  is_latest        Boolean      @default(true) @map("is_latest")
  departments      departments  @relation(fields: [department_id], references: [id], map: "designation_history_departments_fk")
  designation      designations @relation(fields: [designation_uuid], references: [id], onDelete: Cascade)

  @@map("designation_history")
}

model superadmin_configuration {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  esign_status        Boolean  @default(false)
  audit_logs          Boolean  @default(false)
  codes_generated     Boolean  @default(false)
  sent_to_cloud       Boolean  @default(false)
  codes_type          String?
  code_length         Int?
  product_code_length Int?
  crm_url             String   @default("")
  totalCodeGenerated  Int      @default(0)
  updated_at          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  created_at          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("superadmin_configuration")
}

model CodesGenerated {
  id         Int      @unique @default(autoincrement())
  code       String   @unique
  created_at DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model locations {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  location_id                     String                            @unique
  location_name                   String                            @unique
  mfg_licence_no                  String                            @unique
  mfg_name                        String?
  sent_to_cloud                   Boolean                           @default(false)
  address                         String?
  esign_status                    esign_status                      @default(approved)
  created_at                      DateTime                          @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime                          @default(now()) @updatedAt @db.Timestamptz(6)
  CodeGenerationRequest           CodeGenerationRequest[]
  CodeGenerationRequestHistory    CodeGenerationRequestHistory[]
  PrinterLineConfiguration        PrinterLineConfiguration[]
  PrinterLineConfigurationHistory PrinterLineConfigurationHistory[]
  area                            area[]
  area_history                    area_history[]
  batch                           batch[]                           @relation("LocationBatches")
  batch_history                   batch_history[]                   @relation("LocationBatchesHistory")
  history                         location_history[]
  UserHistory                     UserHistory[]
  User                            User[]

  @@map("locations")
}

model location_history {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  location_uuid  String       @db.Uuid
  location_id    String
  location_name  String
  mfg_licence_no String
  mfg_name       String?
  address        String?
  sent_to_cloud  Boolean      @default(false)
  esign_status   esign_status @default(null)
  is_latest      Boolean      @default(true)
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime     @default(now()) @db.Timestamptz(6)
  location       locations    @relation(fields: [location_uuid], references: [id])

  @@map("location_history")
}

model area {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  area_id                         String                            @unique
  area_name                       String                            @unique
  area_category_id                String                            @db.Uuid
  location_uuid                   String                            @db.Uuid
  esign_status                    esign_status                      @default(null)
  created_at                      DateTime                          @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime                          @default(now()) @updatedAt @db.Timestamptz(6)
  PrinterLineConfiguration        PrinterLineConfiguration[]
  PrinterLineConfigurationHistory PrinterLineConfigurationHistory[]
  area_category                   area_category                     @relation(fields: [area_category_id], references: [id])
  location                        locations                         @relation(fields: [location_uuid], references: [id])
  history                         area_history[]

  @@map("area")
}

model area_history {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  area_id          String
  area_name        String
  area_category_id String        @db.Uuid
  location_uuid    String        @db.Uuid
  area_uuid        String        @db.Uuid
  esign_status     esign_status  @default(null)
  is_latest        Boolean       @default(true)
  created_at       DateTime      @default(now()) @db.Timestamptz(6)
  area_category    area_category @relation(fields: [area_category_id], references: [id])
  area             area          @relation(fields: [area_uuid], references: [id])
  location         locations     @relation(fields: [location_uuid], references: [id])

  @@map("area_history")
}

model area_category {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  area_category_name              String                            @unique
  esign_status                    esign_status                      @default(null)
  created_at                      DateTime                          @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime                          @default(now()) @updatedAt @db.Timestamptz(6)
  PrinterLineConfiguration        PrinterLineConfiguration[]
  PrinterLineConfigurationHistory PrinterLineConfigurationHistory[]
  areas                           area[]
  area_history                    area_history[]
  history                         areacategory_history[]

  @@map("area_category")
}

model areacategory_history {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  area_category_name String
  areacategory_uuid  String        @db.Uuid
  esign_status       esign_status  @default(null)
  created_at         DateTime      @default(now()) @db.Timestamptz(6)
  is_latest          Boolean       @default(true)
  area_category      area_category @relation(fields: [areacategory_uuid], references: [id])

  @@map("areacategory_history")
}

model product {
  id                                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id                        String       @unique
  product_name                      String
  gtin                              String       @unique
  country_id                        String       @db.Uuid
  ndc                               String?      @default("")
  mrp                               Float?       @default(0.0)
  generic_name                      String       @default("")
  packaging_size                    String       @db.VarChar(50)
  firstLayer                        Int?
  secondLayer                       Int?
  thirdLayer                        Int?
  productNumber                     Int?
  productNumber_unit_of_measurement String?      @db.Uuid
  firstLayer_unit_of_measurement    String?      @db.Uuid
  secondLayer_unit_of_measurement   String?      @db.Uuid
  thirdLayer_unit_of_measurement    String?      @db.Uuid
  palletisation_applicable          Boolean      @default(false)
  pallet_size                       String?      @db.VarChar(50)
  pallet_size_unit_of_measurement   String?      @db.Uuid
  productNumber_print               Boolean      @default(false)
  firstLayer_print                  Boolean      @default(false)
  secondLayer_print                 Boolean      @default(false)
  thirdLayer_print                  Boolean      @default(false)
  productNumber_aggregation         Boolean      @default(false)
  firstLayer_aggregation            Boolean      @default(false)
  secondLayer_aggregation           Boolean      @default(false)
  thirdLayer_aggregation            Boolean      @default(false)
  generic_salt                      String       @db.VarChar(255)
  composition                       String       @db.VarChar(255)
  dosage                            String       @db.VarChar(255)
  remarks                           String       @db.VarChar(255)
  no_of_units_in_primary_level      String       @db.VarChar(50)
  unit_of_measurement               String?      @db.Uuid
  prefix                            String       @db.VarChar(10)
  packagingHierarchy                Int
  company_uuid                      String       @db.Uuid
  label                             String       @default("")
  leaflet                           String       @default("")
  product_image                     String       @default("")
  esign_status                      esign_status @default(null)
  schedule_drug                     Boolean      @default(false)
  updated_at                        DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  created_at                        DateTime     @default(now()) @db.Timestamptz(6)

  CodeGenerationRequest        CodeGenerationRequest[]
  CodeGenerationRequestHistory CodeGenerationRequestHistory[]
  CodeGenerationSummary        CodeGenerationSummary[]
  ProductGenerationId          ProductGenerationId[]
  batch                        batch[]
  batch_history                batch_history[]
  company                      Company                        @relation(fields: [company_uuid], references: [id])
  countryMaster                CountryMaster                  @relation(fields: [country_id], references: [id])
  product_history              product_history[]
  reportFileFormat             reportFileFormat[]
  Aggregation_transaction      Aggregation_transaction[]

  @@unique([product_id, gtin])
  @@map("product")
}

model product_history {
  id                                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_uuid                      String       @db.Uuid
  product_id                        String
  product_name                      String
  gtin                              String
  country_id                        String       @db.Uuid
  ndc                               String?      @default("")
  mrp                               Float?       @default(0.0)
  generic_name                      String       @default("")
  packaging_size                    String       @db.VarChar(50)
  firstLayer                        Int?
  secondLayer                       Int?
  thirdLayer                        Int?
  productNumber                     Int?
  productNumber_unit_of_measurement String?      @db.Uuid
  firstLayer_unit_of_measurement    String?      @db.Uuid
  secondLayer_unit_of_measurement   String?      @db.Uuid
  thirdLayer_unit_of_measurement    String?      @db.Uuid
  palletisation_applicable          Boolean      @default(false)
  pallet_size                       String?      @db.VarChar(50)
  pallet_size_unit_of_measurement   String?      @db.Uuid
  productNumber_print               Boolean      @default(false)
  firstLayer_print                  Boolean      @default(false)
  secondLayer_print                 Boolean      @default(false)
  thirdLayer_print                  Boolean      @default(false)
  productNumber_aggregation         Boolean      @default(false)
  firstLayer_aggregation            Boolean      @default(false)
  secondLayer_aggregation           Boolean      @default(false)
  thirdLayer_aggregation            Boolean      @default(false)
  generic_salt                      String       @db.VarChar(255)
  composition                       String       @db.VarChar(255)
  dosage                            String       @db.VarChar(255)
  remarks                           String       @db.VarChar(255)
  no_of_units_in_primary_level      String       @db.VarChar(50)
  unit_of_measurement               String?      @db.Uuid
  prefix                            String       @db.VarChar(10)
  packagingHierarchy                Int          @unique
  company_uuid                      String       @db.Uuid
  label                             String       @default("")
  leaflet                           String       @default("")
  product_image                     String       @default("")
  esign_status                      esign_status @default(null)
  schedule_drug                     Boolean      @default(false)
  updated_at                        DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  created_at                        DateTime     @default(now()) @db.Timestamptz(6)
  is_latest                         Boolean      @default(true)

  CodeGenerationRequest        CodeGenerationRequest[]
  CodeGenerationRequestHistory CodeGenerationRequestHistory[]
  CodeGenerationSummary        CodeGenerationSummary[]
  ProductGenerationId          ProductGenerationId[]
  batch                        batch[]
  batch_history                batch_history[]
  company                      Company                        @relation(fields: [company_uuid], references: [id])
  countryMaster                CountryMaster                  @relation(fields: [country_id], references: [id])
  product                      product                        @relation(fields: [product_uuid], references: [id])
  Aggregation_transaction      Aggregation_transaction[]

  @@map("product_history")
}

model batch {
  id                                          String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  batch_no                                    String                         @unique
  product_uuid                                String                         @db.Uuid
  producthistory_uuid                         String                         @unique @db.Uuid
  location_id                                 String                         @db.Uuid
  qty                                         Int
  esign_status                                esign_status                   @default(null)
  manufacturing_date                          DateTime?
  expiry_date                                 DateTime?
  updated_at                                  DateTime                       @default(now()) @updatedAt @db.Timestamptz(6)
  created_at                                  DateTime                       @default(now()) @db.Timestamptz(6)
  sent_to_cloud                               Boolean                        @default(false)
  CodeGenerationRequest                       CodeGenerationRequest[]
  CodeGenerationRequestHistory                CodeGenerationRequestHistory[]
  location                                    locations                      @relation("LocationBatches", fields: [location_id], references: [id])
  product                                     product                        @relation(fields: [product_uuid], references: [id])
  productHistory                              product_history                @relation(fields: [producthistory_uuid], references: [id])
  history                                     batch_history[]                @relation("BatchHistory")
  reportFileFormat                            reportFileFormat[]
  AggregationTransactionsByProductHistoryUUID Aggregation_transaction[]      @relation(name: "producthistory_uuid")
  AggregationTransactionsByBatchId            Aggregation_transaction[]      @relation(name: "batch_id")

  @@unique([batch_no, producthistory_uuid, location_id])
  @@map("batch")
}

model batch_history {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  batch_no            String
  product_uuid        String          @db.Uuid
  producthistory_uuid String          @db.Uuid
  location_id         String          @db.Uuid
  qty                 Int
  batch_uuid          String          @db.Uuid
  esign_status        esign_status    @default(null)
  manufacturing_date  DateTime?
  expiry_date         DateTime?
  sent_to_cloud       Boolean         @default(false)
  created_at          DateTime        @default(now()) @db.Timestamptz(6)
  is_latest           Boolean         @default(true)
  batch               batch           @relation("BatchHistory", fields: [batch_uuid], references: [id])
  location            locations       @relation("LocationBatchesHistory", fields: [location_id], references: [id])
  product             product         @relation(fields: [product_uuid], references: [id])
  productHistory      product_history @relation(fields: [producthistory_uuid], references: [id])

  @@map("batch_history")
}

model PrinterCategory {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  printer_category_id             String                            @unique @db.VarChar(50)
  printer_category_name           String                            @db.VarChar(50)
  printingTechnology              PrintingTechnology
  esign_status                    esign_status?                     @default(null)
  created_at                      DateTime                          @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime                          @updatedAt @db.Timestamptz(6)
  PrinterCategoryHistory          PrinterCategoryHistory[]
  PrinterLineConfiguration        PrinterLineConfiguration[]
  PrinterLineConfigurationHistory PrinterLineConfigurationHistory[]
  PrinterMaster                   PrinterMaster[]
  PrinterMasterHistory            PrinterMasterHistory[]

  @@map("PrinterCategory")
}

model PrinterCategoryHistory {
  id                    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  printer_category_uuid String             @db.Uuid
  printer_category_id   String             @db.VarChar(50)
  printer_category_name String             @db.VarChar(50)
  printingTechnology    PrintingTechnology
  esign_status          esign_status?      @default(null)
  is_latest             Boolean            @default(true)
  created_at            DateTime           @default(now()) @db.Timestamptz(6)
  updated_at            DateTime           @default(now()) @db.Timestamptz(6)
  PrinterCategory       PrinterCategory    @relation(fields: [printer_category_uuid], references: [id])

  @@map("PrinterCategoryHistory")
}

model PrinterMaster {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  printer_category_id             String                            @db.Uuid
  printer_id                      String                            @unique @db.VarChar(50)
  printer_ip                      String                            @unique @db.VarChar(50)
  printer_port                    String                            @db.VarChar(50)
  esign_status                    esign_status?                     @default(null)
  created_at                      DateTime                          @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime                          @updatedAt @db.Timestamptz(6)
  PrinterLineConfiguration        PrinterLineConfiguration[]
  PrinterLineConfigurationHistory PrinterLineConfigurationHistory[]
  PrinterCategory                 PrinterCategory                   @relation(fields: [printer_category_id], references: [id])
  PrinterMasterHistory            PrinterMasterHistory[]

  @@map("PrinterMaster")
}

model PrinterMasterHistory {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  printermaster_uuid  String          @db.Uuid
  printer_category_id String          @db.Uuid
  printer_id          String          @db.VarChar(50)
  printer_ip          String          @db.VarChar(50)
  printer_port        String          @db.VarChar(50)
  esign_status        esign_status?   @default(null)
  created_at          DateTime        @default(now()) @db.Timestamptz(6)
  updated_at          DateTime        @updatedAt @db.Timestamptz(6)
  is_latest           Boolean         @default(true)
  PrinterCategory     PrinterCategory @relation(fields: [printer_category_id], references: [id])
  PrinterMaster       PrinterMaster   @relation(fields: [printermaster_uuid], references: [id])
}

model PrinterLineConfiguration {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  printer_line_name               String                            @unique @db.VarChar(50)
  location_id                     String                            @db.Uuid
  area_category_id                String                            @db.Uuid
  area_id                         String                            @db.Uuid
  enabled                         Boolean
  printer_category_id             String                            @db.Uuid
  printer_id                      String                            @db.Uuid
  control_panel_id                String                            @db.Uuid
  line_no                         Int
  camera_ip                       String                            @default("") @db.VarChar(50)
  camera_port                     Int                               @default(0)
  line_pc_ip                      String                            @default("") @db.VarChar(50)
  esign_status                    esign_status?                     @default(null)
  created_at                      DateTime                          @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime                          @updatedAt @db.Timestamptz(6)
  area_category                   area_category                     @relation(fields: [area_category_id], references: [id])
  area                            area                              @relation(fields: [area_id], references: [id])
  ControlPanel                    ControlPanelMaster                @relation(fields: [control_panel_id], references: [id])
  locations                       locations                         @relation(fields: [location_id], references: [id])
  PrinterCategory                 PrinterCategory                   @relation(fields: [printer_category_id], references: [id])
  PrinterMaster                   PrinterMaster                     @relation(fields: [printer_id], references: [id])
  PrinterLineConfigurationHistory PrinterLineConfigurationHistory[]
  PrinterLineSetting              PrinterLineSetting[]

  @@map("PrinterLineConfiguration")
}

model PrinterLineConfigurationHistory {
  id                            String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  printerlineconfiguration_uuid String                   @db.Uuid
  printer_line_name             String                   @db.VarChar(50)
  location_id                   String                   @db.Uuid
  area_category_id              String                   @db.Uuid
  printer_category_id           String                   @db.Uuid
  printer_id                    String                   @db.Uuid
  enabled                       Boolean
  area_id                       String                   @db.Uuid
  control_panel_id              String                   @db.Uuid
  line_no                       Int
  camera_ip                     String                   @default("") @db.VarChar(50)
  camera_port                   Int                      @default(0)
  line_pc_ip                    String                   @default("") @db.VarChar(50)
  esign_status                  esign_status?            @default(null)
  created_at                    DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime                 @updatedAt @db.Timestamptz(6)
  is_latest                     Boolean                  @default(true)
  area_category                 area_category            @relation(fields: [area_category_id], references: [id])
  area                          area                     @relation(fields: [area_id], references: [id])
  ControlPanelMaster            ControlPanelMaster       @relation(fields: [control_panel_id], references: [id])
  locations                     locations                @relation(fields: [location_id], references: [id])
  PrinterCategory               PrinterCategory          @relation(fields: [printer_category_id], references: [id])
  PrinterMaster                 PrinterMaster            @relation(fields: [printer_id], references: [id])
  PrinterLineConfiguration      PrinterLineConfiguration @relation(fields: [printerlineconfiguration_uuid], references: [id])

  @@map("PrinterLineConfigurationHistory")
}

model PrinterLineSetting {
  id                       String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  printer_line_id          String                   @db.Uuid
  label                    String                   @db.VarChar(50)
  delay                    Int?
  date_format              String
  no_of_groups             Int                      @default(1)
  print_per_group          Int
  variables                String[]
  created_at               DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at               DateTime                 @updatedAt @db.Timestamptz(6)
  PrinterLineConfiguration PrinterLineConfiguration @relation(fields: [printer_line_id], references: [id])
}

model ProductGenerationId {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id        String           @db.Uuid
  product_name      String
  generation_id     String
  sent_to_cloud     Boolean          @default(false)
  product           product          @relation(fields: [product_id], references: [id])
  product_history   product_history? @relation(fields: [product_historyId], references: [id])
  product_historyId String?          @db.Uuid
}

model CodeGenerationSummary {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id          String           @db.Uuid
  product_name        String
  generation_id       String
  packaging_hierarchy String
  last_generated      String
  created_at          DateTime         @default(now()) @db.Timestamptz(6)
  updated_at          DateTime         @updatedAt @db.Timestamptz(6)
  product             product          @relation(fields: [product_id], references: [id])
  product_history     product_history? @relation(fields: [product_historyId], references: [id])
  product_historyId   String?          @db.Uuid
}

model CodeGenerationRequest {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id                   String                         @db.Uuid
  batch_id                     String                         @db.Uuid
  location_id                  String                         @db.Uuid
  generation_id                String
  packaging_hierarchy          String
  no_of_codes                  String
  generated_by                 String
  created_at                   DateTime                       @default(now()) @db.Timestamptz(6)
  status                       CodeGenerationRequestStatus    @default(requested)
  batch_quantity               String
  batch                        batch                          @relation(fields: [batch_id], references: [id])
  locations                    locations                      @relation(fields: [location_id], references: [id])
  product                      product                        @relation(fields: [product_id], references: [id])
  CodeGenerationRequestHistory CodeGenerationRequestHistory[]
  product_history              product_history?               @relation(fields: [product_historyId], references: [id])
  product_historyId            String?                        @db.Uuid
}

model CodeGenerationRequestHistory {
  id                         String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  codeGenerationRequest_uuid String                      @db.Uuid
  product_id                 String                      @db.Uuid
  batch_id                   String                      @db.Uuid
  location_id                String                      @db.Uuid
  generation_id              String
  packaging_hierarchy        String
  no_of_codes                String
  generated_by               String
  created_at                 DateTime                    @default(now()) @db.Timestamptz(6)
  status                     CodeGenerationRequestStatus @default(requested)
  batch_quantity             String
  is_latest                  Boolean                     @default(true)
  batch                      batch                       @relation(fields: [batch_id], references: [id])
  CodeGenerationRequest      CodeGenerationRequest       @relation(fields: [codeGenerationRequest_uuid], references: [id])
  locations                  locations                   @relation(fields: [location_id], references: [id])
  product                    product                     @relation(fields: [product_id], references: [id])
  product_history            product_history?            @relation(fields: [product_historyId], references: [id])
  product_historyId          String?                     @db.Uuid
}

model ControlPanelMaster {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                            String                            @unique
  ip                              String                            @unique @db.VarChar(15)
  port                            Int
  created_at                      DateTime                          @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime                          @updatedAt @db.Timestamptz(6)
  esign_status                    esign_status?                     @default(null)
  ControlPanelMasterHistory       ControlPanelMasterHistory[]
  PrinterLineConfiguration        PrinterLineConfiguration[]
  PrinterLineConfigurationHistory PrinterLineConfigurationHistory[]
}

model ControlPanelMasterHistory {
  id                      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  controlpanelmaster_uuid String             @db.Uuid
  name                    String
  ip                      String             @db.VarChar(15)
  port                    Int
  created_at              DateTime           @default(now()) @db.Timestamptz(6)
  updated_at              DateTime           @updatedAt @db.Timestamptz(6)
  esign_status            esign_status?      @default(null)
  is_latest               Boolean            @default(true)
  ControlPanelMaster      ControlPanelMaster @relation(fields: [controlpanelmaster_uuid], references: [id])
}

model CountryMaster {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  country              String                 @unique @db.VarChar(100)
  codeStructure        String
  CountryMasterHistory CountryMasterHistory[]
  product              product[]
  product_history      product_history[]
}

model CountryMasterHistory {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  country       String        @db.VarChar(100)
  country_id    String        @db.Uuid
  codeStructure String
  countryMaster CountryMaster @relation(fields: [country_id], references: [id])
}

model reportFileFormat {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serial_no     Int
  type          fileType
  Extention     fileExtention
  product_uuid  String        @db.Uuid
  batch_uuid    String        @db.Uuid
  report_format fileFormat
  file_name     String        @unique
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  product       product       @relation(fields: [product_uuid], references: [id])
  batch         batch         @relation(fields: [batch_uuid], references: [id])
}

model printer_allocation {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  printer_ip   String   @unique
  printer_port Int
  mac_address  String   @unique
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @updatedAt @db.Timestamptz(6)
}

model Aggregation_transaction {
  id                        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_id            String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id                String          @db.Uuid
  batch_id                  String          @db.Uuid
  user_id                   String          @db.Uuid
  aggregation_count         Int             @default(0)
  product_gen_id            String
  packagingHierarchy        Int
  producthistory_uuid       String          @db.Uuid
  status                    Status          @default(pending)
  created_at                DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                DateTime        @updatedAt @db.Timestamptz(6)
  product                   product         @relation(fields: [product_id], references: [id])
  batchByBatchId            batch           @relation(fields: [batch_id], references: [id], name: "batch_id")
  User                      User            @relation(fields: [user_id], references: [id])
  product_history           product_history @relation(fields: [packagingHierarchy], references: [packagingHierarchy])
  Scanned_code              Scanned_code[]
  batchByProductHistoryUUID batch           @relation(fields: [producthistory_uuid], references: [producthistory_uuid], name: "producthistory_uuid")
}

model Scanned_code {
  id              String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_id  String                  @db.Uuid
  scanned_0_codes Json[]                  @default([])
  scanned_1_codes Json[]                  @default([])
  scanned_2_codes Json[]                  @default([])
  scanned_3_codes Json[]                  @default([])
  scanned_5_codes Json[]                  @default([])
  transaction     Aggregation_transaction @relation(fields: [transaction_id], references: [id])
}

enum Status {
  pending
  complete
}

enum esign_status {
  rejected
  approved
  pending
  null
}

enum PrinterLineConfigure {
  enable
  disable
}

enum Role {
  superadmin
  admin
  user
}

enum RoundingFactor {
  roundup
  rounddown
  round
}

enum PrintingTechnology {
  inkBased
  ribbonBased
}

enum Protocol {
  TCP
  UDP
}

enum Caution_logo {
  red
  blue
  yellow
  green
  gray
}

enum Packaging_hierarchy {
  one_layer
  two_layer
  three_layer
  four_layer
}

enum CodeGenerationRequestStatus {
  requested
  inprogress
  completed
}

enum fileFormat {
  pdfDetail
  pdfRecord
  productxml
  batchxml
  aggregatexml
}

enum fileType {
  TSP
  PRO
  BAT
  PDF
  WIT
}

enum fileExtention {
  pdf
  xml
}
